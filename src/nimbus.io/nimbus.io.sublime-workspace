{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"Req",
				"RequestParams	struct ʈ"
			],
			[
				"He",
				"Header	map[string][]string ʈ"
			],
			[
				"work",
				"workResult	WorkResult ν"
			],
			[
				"S",
				"String	*string ƒ"
			],
			[
				"Fa",
				"Fatalf	 ƒ"
			],
			[
				"A",
				"ActionFunctionMap	map[Action]ActionFunction ν"
			],
			[
				"D",
				"DeleteVersionFunction	ActionFunction ν"
			],
			[
				"Del",
				"DeleteKeyFunction	ActionFunction ν"
			],
			[
				"Ret",
				"RetrieveVersionFunction	ActionFunction ν"
			],
			[
				"Ar",
				"ArchiveOverwriteFunction	ActionFunction ν"
			],
			[
				"Arch",
				"ArchiveNewVersionFunction	ActionFunction ν"
			],
			[
				"Arv",
				"ArchiveNewKeyFunction	ActionFunction ν"
			],
			[
				"DeleteBu",
				"DeleteBucketFunction	ActionFunction ν"
			],
			[
				"C",
				"CreateBucket	 Ɩ"
			],
			[
				"R",
				"RunSimulation	error ƒ"
			],
			[
				"T",
				"Time	struct ʈ"
			],
			[
				"U",
				"UTC	*time.Location ν"
			],
			[
				"UserI",
				"UserInfoChan	chan<- UserInfo ʈ"
			],
			[
				"retrieve",
				"retrieveResult	[]byte ν"
			],
			[
				"coll",
				"collectionName	 ν"
			],
			[
				"default",
				"defaultServiceDomain	 Ɩ"
			],
			[
				"G",
				"Getenv	string ƒ"
			],
			[
				"r",
				"RFC822	 Ɩ"
			],
			[
				"P",
				"Printf	n int, err error ƒ"
			],
			[
				"a",
				"authKeyId	int ν"
			],
			[
				"err",
				"error	error ν"
			],
			[
				"N",
				"Now	time.Time ƒ"
			],
			[
				"F",
				"Fatalf	 ƒ"
			],
			[
				"Sp",
				"Sprintf	string ƒ"
			],
			[
				"info",
				"infoChan	chan fileInfo ν"
			],
			[
				"ModeT",
				"ModeType	 Ɩ"
			],
			[
				"command",
				"commandData	struct ʈ"
			],
			[
				"up",
				"updater	UpdateFunc ν"
			],
			[
				"com",
				"commandData	struct ʈ"
			],
			[
				"s",
				"safeMap	chan commandData ʈ"
			],
			[
				"l",
				"line	[]byte ν"
			],
			[
				"Tr",
				"TrimRight	[]byte ƒ"
			],
			[
				"Pr",
				"Printf	 ƒ"
			],
			[
				"fil",
				"filenames	[]string ν"
			],
			[
				"E",
				"Exit	 ƒ"
			]
		]
	},
	"buffers":
	[
		{
			"file": "nimbus_blaster/flags.go",
			"settings":
			{
				"buffer_size": 1069,
				"line_ending": "Unix"
			}
		},
		{
			"file": "nimbus_blaster/nimbus_blaster.go",
			"settings":
			{
				"buffer_size": 3672,
				"line_ending": "Unix"
			}
		},
		{
			"file": "nimbus_blaster/worker.go",
			"settings":
			{
				"buffer_size": 1129,
				"line_ending": "Unix"
			}
		},
		{
			"file": "nimbusapi/key.go",
			"settings":
			{
				"buffer_size": 5735,
				"line_ending": "Unix"
			}
		},
		{
			"file": "test_nimbusapi/test_nimbusapi.go",
			"settings":
			{
				"buffer_size": 2521,
				"line_ending": "Unix"
			}
		},
		{
			"contents": "package nimbusapi\n\nimport (\n	\"fmt\"\n	\"io\"\n	\"net/http\"\n	\"os\"\n	\"strconv\"\n	\"time\"\n)\n\nconst (\n	defaultServiceDomain = \"nimbus.io\"\n	defaultServicePort   = 443\n)\n\ntype client struct {\n	credentials   *Credentials\n	httpClient    *http.Client\n	serviceDomain string\n	servicePort   int\n}\n\ntype RequestParams struct {\n	headers http.Header\n	body io.Reader\n}\n\ntype Requester interface {\n	DefaultHostName() string\n	CollectionHostName(collectionName string) string\n	Request(method string, hostName string, path string, \n		params *RequestParams) (*Response, error)\n}\n\ntype Response struct {\n	StatusCode int\n	Status     string\n	Body       io.ReadCloser\n}\n\nfunc NewRequester(credentials *Credentials) (Requester, error) {\n	serviceDomain := os.Getenv(\"NIMBUS_IO_SERVICE_DOMAIN\")\n	if serviceDomain == \"\" {\n		serviceDomain = defaultServiceDomain\n	}\n\n	servicePortStr := os.Getenv(\"NIMBUS_IO_SERVICE_PORT\")\n	if servicePortStr == \"\" {\n		servicePortStr = fmt.Sprintf(\"%d\", defaultServicePort)\n	}\n	servicePort, err := strconv.Atoi(servicePortStr)\n	if err != nil {\n		return nil, err\n	}\n\n	// TODO: the web server is sending a \"Connection: close\" header\n	// We should deal with that\n	httpTransport := &http.Transport{DisableKeepAlives: true}\n	httpClient := &http.Client{Transport: httpTransport}\n\n	requester := client{\n		credentials,\n		httpClient,\n		serviceDomain,\n		servicePort,\n	}\n\n	return &requester, nil\n}\n\nfunc (client *client) DefaultHostName() string {\n	return fmt.Sprintf(\"%s:%d\", client.serviceDomain, client.servicePort)\n}\n\nfunc (client *client) CollectionHostName(collectionName string) string {\n	return fmt.Sprintf(\"%s.%s\", collectionName, client.DefaultHostName())\n}\n\nfunc (client *client) Request(method string, hostName string, path string,\n	params *RequestParams) (*Response, error) {\n\n	current_time := time.Now()\n	timestamp := current_time.Unix()\n	uri := fmt.Sprintf(\"http://%s%s\", hostName, path)\n\n	request, err := http.NewRequest(method, uri, params.body)\n	if err != nil {\n		return nil, err\n	}\n\n	authString, err := ComputeAuthString(client.credentials, method, timestamp,\n		path)\n	if err != nil {\n		return nil, err\n	}\n	request.Header.Add(\"Authorization\", authString)\n	request.Header.Add(\"x-nimbus-io-timestamp\", fmt.Sprintf(\"%d\", timestamp))\n	request.Header.Add(\"agent\", \"gonimbusio/1.0\")\n\n	response, err := client.httpClient.Do(request)\n	if err != nil {\n		return nil, err\n	}\n\n	return &Response{response.StatusCode, response.Status, response.Body}, nil\n}\n",
			"file": "nimbusapi/client.go",
			"file_size": 2354,
			"file_write_time": 1347726584000000,
			"settings":
			{
				"buffer_size": 2443,
				"line_ending": "Unix"
			}
		}
	],
	"build_system": "",
	"command_palette":
	{
		"height": 392.0,
		"selected_items":
		[
			[
				"P",
				"Package Control: Install Package"
			]
		],
		"width": 449.0
	},
	"console":
	{
		"height": 139.0
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"file_history":
	[
		"/home/dougfort/gonimbusio/src/nimbus.io/nimbus.io.sublime-project",
		"/home/dougfort/gonimbusio/src/nimbus.io/benchmark/benchmark.go",
		"/home/dougfort/gonimbusio/src/nimbus.io/benchmark/flags.go",
		"/home/dougfort/gonimbusio/src/nimbus.io/colarchive/flags.go",
		"/home/dougfort/gonimbusio/src/nimbus.io/colarchive/colarchive.go",
		"/home/dougfort/gonimbusio/src/nimbus.io/benchmark/benchmark",
		"/home/dougfort/gonimbusio/src/nimbus.io/benchmark/benchmark.sublime-project",
		"/home/dougfort/.config/sublime-text-2/Packages/User/Preferences.sublime-settings",
		"/home/dougfort/Documents/distributed_mind.html",
		"/home/dougfort/.config/sublime-text-2/Packages/GoSublime/CHANGELOG.md",
		"/home/dougfort/gonimbusio/src/nimbus.io/nimbusapi/http.go",
		"/home/dougfort/gonimbusio/src/nimbus.io/http/key.go",
		"/home/dougfort/gonimbusio/src/nimbus.io/test_http/test_http.go",
		"/home/dougfort/gonimbusio/src/nimbus.io/http/collection.go",
		"/home/dougfort/gonimbusio/src/nimbus.io/http/auth_string.go",
		"/home/dougfort/gonimbusio/src/nimbus.io/http/client.go",
		"/home/dougfort/gonimbusio/src/nimbus.io/http/credentials.go",
		"/home/dougfort/gonimbusio/src/nimbus.io/http/credentials_test.go",
		"/home/dougfort/gonimbusio/src/nimbus.io/http/auth_string_test.go",
		"/home/dougfort/gonimbusio/src/nimbus.io/http/http.go",
		"/home/dougfort/gonimbusio/src/nimbus.io/functional_tests/test_functions/test_functions.go",
		"/home/dougfort/gonimbusio/src/nimbus.io/functional_tests/functional_tests.go",
		"/home/dougfort/go_language/src/safe_slice/safe_slice_test.go",
		"/home/dougfort/go_language/src/safe_slice/safe_slice.go",
		"/home/dougfort/auth_key.txt",
		"/home/dougfort/gonimbusio/src/nimbusio/http/auth_string_test.go",
		"/home/dougfort/gonimbusio/src/nimbusio/test_http/test_http.go",
		"/home/dougfort/gonimbusio/src/aaa/aaa.go",
		"/home/dougfort/gonimbusio/src/bbb/bbb.go",
		"/home/dougfort/.config/sublime-text-2/Packages/Default/Preferences.sublime-settings",
		"/home/dougfort/gonimbusio/src/test_http/test_http.go",
		"/home/dougfort/drfogout/src/spider_solitaire/spider_solitaire_test.go",
		"/home/dougfort/drfogout/src/spider_solitaire/spider_solitaire.go",
		"/home/dougfort/go_language/src/findduplicates/findduplicates.go",
		"/home/dougfort/go_language/src/safemap/safemap.go",
		"/home/dougfort/go_language/src/cgrep1/cgrep.go",
		"/home/dougfort/go_language/src/filter/filter.go"
	],
	"find":
	{
		"height": 35.0
	},
	"find_in_files":
	{
		"height": 0.0,
		"where_history":
		[
			""
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
			"conjoinedPart",
			"func(config *Config)",
			"json",
			" int",
			" int,",
			"ReadFile",
			"reader",
			"FileReader",
			"json",
			"rawMapToColl",
			"rawMap",
			"json",
			"rawMapToColl",
			"json",
			"nimbusiohttp",
			"credentials",
			"ListKeysInCollection",
			"log",
			"ComputeAuthString",
			"	\"io/ioutil\"\n",
			"	fmt.Printf(\"object = '%v'\", object)\n",
			"requestor",
			"userName =",
			"env",
			"environment"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
			"func(requester nimbusapi.Requester, config *Config)",
			",",
			"nimbusapi",
			"requester",
			"testEntry{"
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"selected": 5,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "nimbus_blaster/flags.go",
					"settings":
					{
						"buffer_size": 1069,
						"regions":
						{
						},
						"selection":
						[
							[
								844,
								844
							]
						],
						"settings":
						{
							"syntax": "Packages/Go/Go.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 145.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "nimbus_blaster/nimbus_blaster.go",
					"settings":
					{
						"buffer_size": 3672,
						"regions":
						{
						},
						"selection":
						[
							[
								2209,
								2209
							]
						],
						"settings":
						{
							"syntax": "Packages/Go/Go.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 1258.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "nimbus_blaster/worker.go",
					"settings":
					{
						"buffer_size": 1129,
						"regions":
						{
						},
						"selection":
						[
							[
								1103,
								1103
							]
						],
						"settings":
						{
							"syntax": "Packages/Go/Go.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 478.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 3,
					"file": "nimbusapi/key.go",
					"settings":
					{
						"buffer_size": 5735,
						"regions":
						{
						},
						"selection":
						[
							[
								669,
								669
							]
						],
						"settings":
						{
							"syntax": "Packages/Go/Go.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 2044.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 4,
					"file": "test_nimbusapi/test_nimbusapi.go",
					"settings":
					{
						"buffer_size": 2521,
						"regions":
						{
						},
						"selection":
						[
							[
								1358,
								1358
							]
						],
						"settings":
						{
							"syntax": "Packages/Go/Go.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 393.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 5,
					"file": "nimbusapi/client.go",
					"settings":
					{
						"buffer_size": 2443,
						"regions":
						{
						},
						"selection":
						[
							[
								1941,
								1941
							]
						],
						"settings":
						{
							"syntax": "Packages/Go/Go.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 1131.0,
						"zoom_level": 1.0
					},
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 0.0
	},
	"input":
	{
		"height": 33.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.exec":
	{
		"height": 112.0
	},
	"replace":
	{
		"height": 64.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 0.0,
		"selected_items":
		[
		],
		"width": 0.0
	},
	"show_minimap": false,
	"show_open_files": false,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 150.0,
	"status_bar_visible": true
}
